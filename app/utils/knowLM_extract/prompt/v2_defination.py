#!/usr/bin/env python3
# -*- encoding utf-8 -*-

EntityDefinition1 = """
## "实体"定义
- 实体是现实世界中可以独立存在并能够被唯一标识的事物或对象。在知识图谱和信息抽取的上下文中，实体具有以下特征：
### 核心特征
- 唯一性：每个实体都有唯一的标识
- 可识别性：能够通过其属性和关系与其他实体区分开
- 独立性：可以独立存在，不依赖于其他概念
### "实体"的组成部分
1. 实体标识
唯一标识实体的名称或ID
例如："张三"、"北京大学"、"iPhone 14"
2. 实体类型
定义实体所属的类别
例如："人物"、"组织"、"产品"、"地点"
3. 属性（attributes）
实体的属性是描述实体特征的键值对
例如：""年龄": "16""、""颜色": "红""
### 示例
{
    "小说": "三国演义", 
    "小说_attributes":  {
        "作者": "罗贯中", 
        "创作年代": "元末明初洪武年间"
    }
}
"""

EntityDefinition2 = """
## "实体"定义
- 实体是现实世界中可以独立存在并能够被唯一标识的事物或对象。在知识图谱和信息抽取的上下文中，实体具有以下特征：
### "实体"的组成部分
1. 实体类型
2. 实体标识
3. 属性（attributes）
### 示例
{
    "小说": "三国演义", 
    "小说_attributes":  {
        "作者": "罗贯中", 
        "创作年代": "元末明初洪武年间"
    }
}
"""

RelationDefinition1 = """
## "关系"定义
- 关系是语义上连接两个或多个实体的语义纽带，用于表达实体之间的相互作用、关联或依赖。在知识图谱和信息抽取的上下文中，关系具有以下特征：
### 核心特征
- 三元组结构：关系严格遵循"主体-谓词-客体"的三元组格式
- 语义性：表达具有明确语义含义的实体间联系
- 方向性：关系具有明确的方向，从主体指向客体
- 明确性：只提取文本中明确表达的关系，避免推断或修饰性内容
### "关系"的组成部分
1. 关系类型:
作为特殊实体，标识出"关系"类型数据，固定为"关系"
2. 关系标识内容：
能够表示关系三元组的内容
例如："小华使用计算机"是关系"小华-使用-计算机"的关系标识内容
3. "关系"三元组组成（attributes）：
该关系内的各个组成，以attributes方式输出，包括：
    （1）主体
    关系的发起者或源实体
    通常是关系中的主动方或起始点
    例如：在"小明是小张的老师"中，主体是"小明"
    （2）谓词
    连接主体和客体的语义纽带
    描述主体和客体之间的具体关系类型
    例如：在"小明是小张的老师"中，谓词是"是...的老师"
    （3）客体
    关系的接受者或目标实体
    通常是关系中的被动方或终点
    例如：在"小明是小张的老师"中，客体是"小张"
**注意**：主体、客体必须是已定义或已抽取的实体（实体标识）
### 示例
{
    "关系": "华为研发了麒麟芯片", 
    "关系_attributes":  {
        "主体": "华为", 
        "谓词": "研发", 
        "客体": "麒麟芯片"
    }
}
"""

RelationDefinition2 = """
## "关系"定义
- 关系是语义上连接两个或多个实体的语义纽带，用于表达实体之间的相互作用、关联或依赖。在知识图谱和信息抽取的上下文中，关系具有以下特征：
### "关系"的组成部分
1. 关系类型：作为特殊实体，标识出"关系"类型数据，固定为"关系"
2. 关系标识内容
3. "关系"三元组组成（attributes）
该关系三元组内的各个组成，包括：主体、谓词、客体
**注意**：主体、客体必须是已定义或已抽取的实体（实体标识）
### 示例
{
    "关系": "华为研发了麒麟芯片", 
    "关系_attributes":  {
        "主体": "华为", 
        "谓词": "研发", 
        "客体": "麒麟芯片"
    }
}
"""

entityDefinition = EntityDefinition2
relationDefinition = RelationDefinition2
